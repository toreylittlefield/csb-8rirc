{"version":3,"sources":["src/index.js"],"names":["gridItems","document","querySelectorAll","querySelector","getBoundingClientRect","toJSON","top","bottom","left","right","height","documentElement","scrollTop","console","log","writeToScreenBox","logOutput","loggingBoxList","li","createElement","pTag","output","innerText","JSON","stringify","appendChild","append","randomShuffle","numOfItems","length","forEach","currentItem","getElementById","Math","ceil","random","after","shuffleButtonSelector","onclick","isOverElement","event","PointerEvent","x","HTMLElement","y","currentClosetElement","elementFromPoint","className","id","clondedNode","clonedCopy","cloneNode","replaceWith","move","element","target","addRemoveClonedNode","style","position","pageY","pageX","up","clonedElement","remove","removeEventListener","transform","pointerEvents","releasePointerCapture","pointerId","removed","clonedActive","nextSibling","nextElementSibling","before","parentElement","down","setPointerCapture","addEventListener","once","generateRandomRGBA","Array","fill","map","color","idx","h","s","l","fontColor","rgbaBG","rgbaFontColor","gridItem","index","backgroundColor","onpointerdown","buttonState","open","buttonOpen","loggingSection","buttonSelector","listSection","toggleOpen","visibility","preventDefault"],"mappings":"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","file":"src.59b111e0.js","sourceRoot":"..","sourcesContent":["const gridItems = document.querySelectorAll(\".grid-item\");\n\n/**\n * @type {DOMRect}\n */\nlet { top, bottom, left, right, height } = document\n  .querySelector(\".grid-container\")\n  .getBoundingClientRect()\n  .toJSON();\n\ntop = document.documentElement.scrollTop + top;\nbottom = height + top;\n\nconsole.log({\n  top,\n  bottom,\n  //   left,\n  //   right,\n  //   x,\n  //  y,\n  scrollTop: document.documentElement.scrollTop + top,\n  height\n});\n\n// writes text in <p> tags and appends to the logging-box list\nconst writeToScreenBox = (logOutput) => {\n  const loggingBoxList = document.querySelector(\".logging-box ul\");\n  const li = document.createElement(\"li\");\n  const pTag = document.createElement(\"p\");\n  let output = logOutput;\n\n  if (typeof output === \"object\")\n    pTag.innerText = JSON.stringify(logOutput, null, 2);\n  if (typeof output === \"string\") pTag.innerText = logOutput;\n  if (typeof output !== \"string\" && output !== \"object\")\n    pTag.innerText = logOutput;\n\n  li.appendChild(pTag);\n  loggingBoxList.append(li);\n};\n\nwriteToScreenBox(top);\nwriteToScreenBox(bottom);\nwriteToScreenBox(height);\nwriteToScreenBox(left);\nwriteToScreenBox(right);\n\n/**\n * @param {Event} event\n * @param {NodeList} gridItems\n */\nconst randomShuffle = () => {\n  const numOfItems = gridItems.length;\n  const randomGridId = () => Math.ceil(Math.random() * numOfItems - 1);\n  [...gridItems].forEach((currentItem) => {\n    const randomGridItem = document.getElementById(randomGridId());\n    randomGridItem.after(currentItem);\n  });\n};\n\nconst shuffleButtonSelector = document.querySelector(\".btn.shuffle\");\nshuffleButtonSelector.onclick = randomShuffle;\n\n/**\n * @description swaps in the DOM the cloned element with the grid-item that the pointer is currently over\n * @param {PointerEvent} event\n * @param {HTMLElement} element\n */\nconst isOverElement = (event = PointerEvent, element = HTMLElement) => {\n  // console.log({ moveEvent: event });\n  const x = event.x;\n  const y = event.y;\n  if (x <= left || x >= right || y <= top || y >= bottom) {\n    return false;\n  }\n  const currentClosetElement = document.elementFromPoint(x, y);\n  if (\n    currentClosetElement.className !== \"grid-item\" ||\n    currentClosetElement.id === \"active-clone\"\n  )\n    return true;\n  const clondedNode = document.querySelector(\"#active-clone\");\n  const clonedCopy = clondedNode.cloneNode();\n  currentClosetElement.replaceWith(clonedCopy);\n  clondedNode.replaceWith(currentClosetElement);\n  // console.log({ currentClosetElement, clondedNode, clonedCopy });\n  return true;\n  // // moving to left\n  // if (event.movementX < 0) return currentClosetElement.before(clondedNode);\n  // // moving to right\n  // if (event.movementX > 0) return currentClosetElement.after(clondedNode);\n  // // moving down\n  // if (event.movementY < 0) return currentClosetElement.after(clondedNode);\n  // // moving up\n};\n\n/**\n * @description dragging the selected element\n * @param {PointerEvent} event\n */\nconst move = (event) => {\n  const element = event.target;\n  addRemoveClonedNode(element, false);\n  element.style.position = \"absolute\";\n  const canMove = isOverElement(event, element);\n  if (canMove) {\n    element.style.top = event.pageY + \"px\";\n    element.style.left = event.pageX + \"px\";\n  }\n};\n\n/**\n * @description releasing the pointer i.e. mouse or touch\n * @param {PointerEvent} event\n * @param {HTMLElement} element\n */\nconst up = (event, element) => {\n  const clonedElement = document.querySelector(\"#active-clone\");\n  // console.log({ element, clonedElement });\n  if (clonedElement) {\n    clonedElement.replaceWith(element);\n    clonedElement.remove();\n    clonedElement.removeEventListener(\"pointerup\", up);\n  }\n  element.removeEventListener(\"pointermove\", move);\n  // element.style.position = \"static\";\n  // element.style.top = \"none\"\n  // element.style.left = \"none\";\n  // element.style.transform = \"none\";\n  // element.style.pointerEvents = \"auto\";\n\n  element.style.position = \"\";\n  element.style.top = \"\";\n  element.style.left = \"\";\n  element.style.transform = \"\";\n  element.style.pointerEvents = \"auto\";\n\n  // addRemoveClonedNode(null, true);\n  element.releasePointerCapture(event.pointerId);\n};\n\n/**\n * @description clones once the currently selected element\n * @param {HTMLElement} element\n * @param {Boolean} removed\n * @returns\n */\nconst addRemoveClonedNode = (element, removed) => {\n  if (removed) {\n    const clonedActive = document.getElementById(\"active-clone\");\n    if (clonedActive) clonedActive.remove();\n    return;\n  }\n  if (element?.style.position === \"absolute\") return;\n\n  const nextSibling = element.nextElementSibling;\n  const clonedElement = element.cloneNode();\n  clonedElement.id = \"active-clone\";\n  // console.log({ clonedElement });\n  if (nextSibling) nextSibling.before(clonedElement);\n  if (!nextSibling) element.parentElement.append(clonedElement);\n};\n\n/**\n * @description selecting an element on pointer down\n * @param {PointerEvent} event\n */\nfunction down(event) {\n  writeToScreenBox(event);\n  writeToScreenBox(event.target);\n  const element = event.target;\n  element.style.pointerEvents = \"none\";\n  element.setPointerCapture(event.pointerId);\n  element.style.transform = `scale(1.25)`;\n  // add our listener events\n  element.addEventListener(\"pointermove\", move);\n  element.addEventListener(\"pointerup\", (event) => up(event, element), {\n    once: true\n  });\n}\n\n// generate random background colors and fonts\nconst generateRandomRGBA = () => {\n  let [h, s, l] = Array(3)\n    .fill(0)\n    .map((color, idx) =>\n      idx === 0\n        ? Math.ceil(Math.random() * 365)\n        : Math.ceil(Math.random() * 100)\n    );\n  let fontColor = `hsla(${0},${s >= 60 ? 50 : 10}%,${l >= 60 ? 10 : 100}%,1)`;\n  return { rgbaBG: `hsla(${h},${s}%,${l}%,0.8)`, rgbaFontColor: fontColor };\n};\n\n// label and add styles to grid-items at runtime\ngridItems.forEach((gridItem, index) => {\n  const { rgbaBG, rgbaFontColor } = generateRandomRGBA();\n  gridItem.id = index;\n  gridItem.style.backgroundColor = rgbaBG;\n  gridItem.style.color = rgbaFontColor;\n\n  gridItem.onpointerdown = down;\n});\n\n// hide show the console on button click event\nclass buttonState {\n  constructor() {\n    this.open = false;\n  }\n\n  /**\n   * @param {boolean} open\n   */\n  set toggle(open) {\n    open === false ? (this.open = true) : (this.open = false);\n  }\n\n  toggleOpen() {\n    return this.open;\n  }\n}\nconst buttonOpen = new buttonState();\nconst loggingSection = document.querySelector(\".logging-box-section\");\nconst buttonSelector = document.querySelector(\".btn.show\");\nconst listSection = document.querySelector(\".logging-box ul\");\n\nbuttonSelector.addEventListener(\"click\", (event) => {\n  buttonOpen.open = !buttonOpen.open;\n  if (buttonOpen.toggleOpen()) {\n    loggingSection.style.height = \"min(70vh, 100%)\";\n    listSection.style.visibility = \"visible\";\n  }\n  if (!buttonOpen.toggleOpen()) {\n    loggingSection.style.height = \"50px\";\n    listSection.style.visibility = \"hidden\";\n  }\n  event.preventDefault();\n});\n"]}